# -*- coding: utf-8 -*-
"""iterasi Sederhana

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nSgzl8_esPXaua3rkf0ut-F7drhbcgw2

# Iterasi Sederhana
Oleh kelompok 2

1.Anwar Sanusi(19081010068)

2.I Wayan Alston Argodi(19081010163)

3.Wariyanti Nugroho Putri (19081010020)

4.Fatimatuz Zahroh (19081010021)

5.Avia Arista (19081010077)

6.Imalia Rosyida (19081010113)
"""

from math import *

"""# Import math
from math import * kode ini berfungsi untuk mengimpor/mengambil fungsi math dari phyton sendiri kemudian mengambil operator arimatika pangkat *
"""

def f(x):
    return (eval(inputfx))

def g(x):
    return (eval(inputgx))

"""# Fungsi
dalam fungsi menggunakan def untuk menyatakan fungsi dalam phyton kemudian variabel x sebagai parameter dan eval berfungsi untuk memparsing (menguraikan) string ekspresi yang dilewatkan ke dalamnya, dan menjalankannya sebagai ekspresi Python murni.
inputgx  dan inputfx adalah persamaan yang dimasukkan user
"""

inputfx=str(input('masukkan f(x): '))
inputgx=str(input('masukkan g(x): '))
x0 = float(input('masukkan nilai awal: '))
e = float(input('toleransi Error: '))
N = int(input('Maximum iterasi: '))
print('\n\nIterasi Sederhana')

"""# Input

1.inputfx=str(input('masukkan f(x): ')) berfungsi untuk memasukan persamaan f(x) dalam bentuk string

2.inputgx=str(input('masukkan g(x): ')) berfungsi untuk memasukan persamaan g(x) dalam bentuk string

3.x0 = float(input('masukkan nilai awal: ')) untuk memasukan nilai awal yang ditentukan oleh pengguna

4.E = float(input('toleransi error : '))untuk memasukan toleransi error

4.N = float(input('maksimum iterasi :')) untuk memasukan batas berapa kali iterasi ingin dilakukan
"""

step = 1
flag = 1
condition = True

"""# Kondisi
didalam potongan kode tersebut terdapat pernyataan kondisi dalam perhitugan step merupakan langkah yang diulang sesuai dengan inputan N ( Batas Iterasi ) yang dimasukan oleh pengguna, kemudian flag jika sama dengan 1 maka hasil akhir perhitungan tersbut memerlukan root sesuai dengan hasil akhir jika tidak maka akan keluar tidak konvergen.condition = True jika kondisi benar maka lanjut ke dalam perhitungan.
"""

while condition:      
    x1 = g(x0)
    print('Iteration-%d, g(x1) = %0.6f and f(x1) = %0.6f' % (step, x1, f(x1)))
    x0 = x1

if step > N:
         flag=0
         break
        
    condition = abs(f(x1)) > e

if flag==1:
    print('\nRequired root is: %0.8f' % x1)
else:
    print('\nNot Convergent.')

"""Mengecek jika step(perulangan) yang diperlukan lebih besar dari N(batas iterasi) maka program akan berhenti dan akan keluar Not Convergent, selanjutnya jika flag sama dengan 1 maka program akan mengecek apakah nilai f(x1) lebih besar dari e (toleransi eror). Jika lebih besar, maka condition akan bernilai true dan program akan terus melakukan looping sampai nilai f(x1) lebih kecil dari e.

# New Section
"""

from math import *

def f(x):
    return (eval(inputfx))

def g(x):
    return (eval(inputgx))

#input data
inputfx=str(input('masukkan f(x): '))
inputgx=str(input('masukkan g(x): '))
x0 = float(input('masukkan nilai awal: '))
e = float(input('toleransi Error: '))
N = int(input('Maximum iterasi: '))
print('\n\nIterasi Sederhana')
step = 1
flag = 1
condition = True
while condition:      
    x1 = g(x0)
    print('Iteration-%d, g(x1) = %0.6f and f(x1) = %0.6f' % (step, x1, f(x1)))
    x0 = x1

    step = step + 1
        
    if step > N:
         flag=0
         break
        
    condition = abs(f(x1)) > e

if flag==1:
    print('\nRequired root is: %0.8f' % x1)
else:
    print('\nNot Convergent.')